name: Build and Release

on:
  push:
    branches: [ main, master, feature/* ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [ published ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run type checking
      run: npx tsc --noEmit
      
    - name: Build plugin
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: plugin-build-${{ matrix.node-version }}
        path: |
          main.js
          manifest.json
          styles.css
          themes.css
        retention-days: 30

  test:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: plugin-build-20.x
        
    - name: Verify build files exist
      run: |
        ls -la main.js
        ls -la manifest.json
        ls -la styles.css
        test -f main.js
        test -f manifest.json
        test -f styles.css

  release:
    runs-on: ubuntu-latest
    needs: [build, test]
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build plugin
      run: npm run build
      
    - name: Create release archive
      run: |
        mkdir -p release
        cp main.js manifest.json styles.css themes.css release/
        cd release
        zip -r obsidian-github-stars-manager.zip ./*
        
    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          release/main.js
          release/manifest.json
          release/styles.css
          release/themes.css
          release/obsidian-github-stars-manager.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  validate:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Validate manifest.json
      run: |
        node -e "
          const manifest = require('./manifest.json');
          console.log('Validating manifest.json...');
          
          // Check required fields
          const required = ['id', 'name', 'version', 'minAppVersion', 'description', 'author', 'authorUrl'];
          for (const field of required) {
            if (!manifest[field]) {
              console.error(\`Missing required field: \${field}\`);
              process.exit(1);
            }
          }
          
          // Check version format
          if (!/^\d+\.\d+\.\d+$/.test(manifest.version)) {
            console.error('Version must be in format x.y.z');
            process.exit(1);
          }
          
          console.log('✅ manifest.json is valid');
        "
      
    - name: Check TypeScript compilation
      run: npx tsc --noEmit
      
    - name: Check build script exists
      run: |
        if [ ! -f "package.json" ]; then
          echo "package.json not found"
          exit 1
        fi
        
        if ! npm run --silent | grep -q "build"; then
          echo "Build script not found in package.json"
          exit 1
        fi
        
        echo "✅ Build configuration is valid"