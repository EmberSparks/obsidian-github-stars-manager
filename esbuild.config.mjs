import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import fs from "fs"; // Added for file system operations
import path from "path"; // Added for path manipulation

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === "production");

// esbuild plugin to handle copying files after build
const copyPlugin = {
    name: 'copy-to-obsidian',
    setup: (build) => {
        build.onEnd(result => {
            if (result.errors.length > 0) {
                console.error("Build failed with errors, skipping copy.");
                return;
            }

            const obsidianPluginDir = process.env.OBSIDIAN_PLUGIN_DIR;
            if (!obsidianPluginDir) {
                console.warn("OBSIDIAN_PLUGIN_DIR environment variable not set. Plugin will not be automatically copied to Obsidian vault.");
                return;
            }

            const pluginId = "obsidian-github-stars-manager"; // Must match the 'id' in manifest.json
            const targetDir = path.join(obsidianPluginDir, pluginId);

            // Ensure target directory exists
            if (!fs.existsSync(targetDir)) {
                fs.mkdirSync(targetDir, { recursive: true });
            }

            // Copy main.js
            try {
                fs.copyFileSync("main.js", path.join(targetDir, "main.js"));
                console.log(`Copied main.js to ${targetDir}`);
            } catch (err) {
                console.error('Error copying main.js:', err);
            }


            // Copy styles.css if it exists
            if (fs.existsSync("styles.css")) {
                try {
                    fs.copyFileSync("styles.css", path.join(targetDir, "styles.css"));
                    console.log(`Copied styles.css to ${targetDir}`);
                } catch (err) {
                    console.error('Error copying styles.css:', err);
                }
            }

            // Copy manifest.json
            try {
                fs.copyFileSync("manifest.json", path.join(targetDir, "manifest.json"));
                console.log(`Copied manifest.json to ${targetDir}`);
            } catch (err) {
                console.error('Error copying manifest.json:', err);
            }
        });
    },
};


const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["src/main.ts"], // Corrected entry point
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: "main.js",
	minify: prod,
    plugins: [copyPlugin], // Add our custom plugin here
});

if (prod) {
	await context.rebuild();
	process.exit(0);
} else {
	await context.watch();
}
